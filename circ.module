<?php

function circ_init() {
  require_once('circ_itemtypes.inc');
  drupal_add_css(drupal_get_path('module', 'circ') . '/circ.css');

  define('CIRC_DEFAULT_ICON',       variable_get('circ_default_item_type_icon', ''));

  define('CIRC_DATE_FORMAT',        variable_get('circ_date_format', 'd-M-y'));

  define('CIRC_EXAMPLE_TITLE',      variable_get('circ_example_title', 'Hackers & painters : big ideas from the computer age'));
  define('CIRC_EXAMPLE_AUTHOR',     variable_get('circ_example_author', 'Paul Graham'));

  define('CIRC_CHARGES_DESC',       variable_get('circ_charges_desc', ''));
  define('CIRC_CHARGES_EMPTY',      variable_get('circ_charges_empty', 'You have no checked out items.'));

  define('CIRC_COURTESY_INTERVAL',  variable_get('circ_courtesy_interval', '3'));
  define('CIRC_COURTESY_COLOR',     variable_get('circ_courtesy_color', '#CCF'));
  define('CIRC_COURTESY_STATUS',    variable_get('circ_courtesy_status', 'Item is due soon. If you\'re done with the book, why not return it to avoid a fine?'));

  define('CIRC_RECALL_STATUS',      variable_get('circ_recall_status', 'Item recalled. The due date has been modified. Please return as soon as posisble.'));
  define('CIRC_RECALL_COLOR',       variable_get('circ_recall_color', '#C6C'));

  define('CIRC_LOST_INTERVAL',      variable_get('circ_lost_interval', '30'));
  define('CIRC_LOST_COLOR',         variable_get('circ_lost_color', '#FCF'));
  define('CIRC_LOST_STATUS',        variable_get('circ_lost_status', 'Item lost. Please return this item or pay the fine.'));

  define('CIRC_OVERDUE_COLOR',      variable_get('circ_overdue_color', '#FCC'));
  define('CIRC_OVERDUE_STATUS',     variable_get('circ_overdue_status', 'Item overdue. Please return this item.'));

  define('CIRC_REQUESTS_DESC',      variable_get('circ_requests_desc', ''));
  define('CIRC_REQUESTS_EMPTY',     variable_get('circ_requests_empty', 'You have not requested any items.'));

  define('CIRC_AVAILABLE_COLOR',    variable_get('circ_available_color', '#CFC'));
  define('CIRC_AVAILABLE_STATUS',   variable_get('circ_available_status', 'Item available.'));

  define('CIRC_UNAVAILABLE_COLOR',    variable_get('circ_unavailable_color', '#CFC'));
  define('CIRC_UNAVAILABLE_STATUS',   variable_get('circ_unavailable_status', 'Item unavailable. You will be notified when it becomes available.'));

  define('CIRC_CHARGES_HEADING',   variable_get('circ_charges_heading', 'Checked Out Items'));
  define('CIRC_REQUESTS_HEADING',  variable_get('circ_requests_heading', 'Outstanding Requests'));
  define('CIRC_FINES_HEADING',      variable_get('circ_fines_heading', 'Fines and Fees'));

  define('CIRC_FINES_DESC',         variable_get('circ_fines_desc', ''));
  define('CIRC_FINES_EMPTY',        variable_get('circ_fines_empty', 'You have no fines and fees.'));
  define('CIRC_FINES_COLOR',        variable_get('circ_fines_color', '#FCC'));
}

function circ_perm() {
  return array('access circ account', 'administer circ');
}

function circ_menu() {
  $admin_library = user_access('administer library');
  $admin_circ = user_access('administer circ');
  global $user;

  $items = array();
  $items[] = array(
    'path' => 'user/' . arg(1) . '/circ',
    'title' => 'Library Account Beta',
    'callback' => 'circ_account',
    'access' => ($user->uid == arg(1) || $admin_circ) ? true : false,
    'type' => MENU_LOCAL_TASK,
  );
  $items[] = array(
    'path' => 'admin/library/circ',
    'title' => t('Circulation Settings'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('circ_settings_form'),
    'access' => $admin_circ || $admin_library,
    'type' => MENU_DYNAMIC_ITEM,
  );
  $items[] = array(
    'path' => 'admin/library/circ/settings',
    'title' => t('Circulation Settings'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('circ_settings_form'),
    'access' => $admin_circ || $admin_library,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  // Item Types
  $items[] = array(
    'path' => 'admin/library/circ/itemtypes',
    'title' => t('Item Types'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('circ_itemtypes_overview_form'),
    'access' => $admin_circ || $admin_library,
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items[] = array(
    'path' => 'admin/library/circ/itemtypes/list',
    'title' => t('List'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('circ_itemtypes_overview_form'),
    'access' => $admin_circ || $admin_library,
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -5,
  );
  $items[] = array(
    'path' => 'admin/library/circ/itemtypes/settings',
    'title' => t('Settings'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('circ_itemtypes_settings_form'),
    'access' => $admin_circ || $admin_library,
    'type' => MENU_LOCAL_TASK,
    'weight' => -4,
  );
  $items[] = array(
    'path' => 'admin/library/circ/itemtypes/add',
    'title' => t('Add Item Type'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('circ_add_item_type_form'),
    'access' => $admin_circ || $admin_library,
    'type' => MENU_LOCAL_TASK,
    'weight' => -3,
  );
  $items[] = array(
    'path' => 'admin/library/circ/itemtypes/edit/' . arg(5),
    'title' => t('Edit Item Type'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('circ_add_item_type_form', arg(5)),
    'access' => $admin_circ || $admin_library,
    'type' => MENU_CALLBACK,
    'weight' => 0,
  );
  $items[] = array(
    'path' => 'admin/library/circ/itemtypes/delete/' . arg(5),
    'title' => t('Delete item type'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('circ_item_type_confirm_delete', arg(5)),
    'access' => $admin_circ || $admin_library,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function circ_settings_form() {
  $exampleTitle = CIRC_EXAMPLE_TITLE;
  $exampleAuthor = CIRC_EXAMPLE_AUTHOR;
  $example = $exampleTitle . ' / ' . $exampleAuthor;
  $options = array();
  for ($i = 1; $i <= 60; $i++) {
    $options[$i] = format_plural($i, '1 day', '@count days');
  }

  $form = array();
  $form['date'] = array(
    '#type' => 'fieldset',
    '#title' => t('Date Settings'),
    '#collapsible' => true,
  );
  $form['date']['date_format'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom Date Format'),
    '#default_value' => CIRC_DATE_FORMAT,
    '#description' => 'See PHP\'s <a href="http://www.php.net/date">date()</a> function for help creating a date format.<br>Your current date format is: ' . CIRC_DATE_FORMAT . '. Today\'s date looks like: ' . date(CIRC_DATE_FORMAT),
  );
  $form['example'] = array(
    '#type' => 'fieldset',
    '#title' => t('Example Item'),
    '#description' => t('This example will be used to provide examples for the Circulation Module Settings.'),
    '#collapsible' => TRUE,
  );
  $form['example']['example_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $exampleTitle,
  );
  $form['example']['example_author'] = array(
    '#type' => 'textfield',
    '#title' => t('Author'),
    '#default_value' => $exampleAuthor,
  );

  // Charges
  $form['charges'] = array(
    '#type' => 'fieldset',
    '#title' => t('Charged Items Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['charges']['charges_heading'] = array(
    '#type' => 'textfield',
    '#title' => t('Charges Heading'),
    '#default_value' => CIRC_CHARGES_HEADING,
  );
  $form['charges']['charges_desc'] = array(
    '#type' => 'textarea',
    '#title' => t('Paragraph'),
    '#default_value' => CIRC_CHARGES_DESC,
  );
  $form['charges']['charges_empty'] = array(
    '#type' => 'textarea',
    '#title' => t('Empty Text'),
    '#default_value' => CIRC_CHARGES_EMPTY,
  );


  // Courtesy Settings
  $form['charges']['courtesy'] = array(
    '#type' => 'fieldset',
    '#title' => t('Courtesy Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['charges']['courtesy']['courtesy_interval'] = array(
    '#type' => 'select',
    '#title' => t('Courtesy Notice Interval'),
    '#default_value' => CIRC_COURTESY_INTERVAL,
    '#description' => t('The number of days used to identify an item as near due.'),
    '#options' => $options,
  );
  $form['charges']['courtesy']['courtesy_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Courtesy Notice Color'),
    '#default_value' => CIRC_COURTESY_COLOR,
  );
  $form['charges']['courtesy']['courtesy_status'] = array(
    '#type' => 'textfield',
    '#title' => t('Courtesy Item Status'),
    '#default_value' => CIRC_COURTESY_STATUS,
    '#description' => t('This is the status that will appear beneath the title and author of an item when an item is marked courtesy.'),
  );
  $form['charges']['courtesy']['courtesy_example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="color-indicator"><strong>Example:</strong><div style="background-color: ' . CIRC_COURTESY_COLOR . ';"><div class="item-title">' . $example . '</div><div class="item-status">' . CIRC_COURTESY_STATUS . '</div></div></div>',
  );

  // Overdue Settings
  $form['charges']['overdue'] = array(
    '#type' => 'fieldset',
    '#title' => t('Overdue Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['charges']['overdue']['overdue_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Overdue Notice Color'),
    '#default_value' => CIRC_OVERDUE_COLOR,
  );
  $form['charges']['overdue']['overdue_status'] = array(
    '#type' => 'textfield',
    '#title' => t('Overdue Item Status'),
    '#default_value' => CIRC_OVERDUE_STATUS,
    '#description' => t('This is the status that will appear beneath the title and author of an item when an item is marked overdue.'),
  );
  $form['charges']['overdue']['overdue_example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="color-indicator"><strong>Example:</strong><div style="background-color: ' . CIRC_OVERDUE_COLOR . ';"><div class="item-title">' . $example . '</div><div class="item-status">' . CIRC_OVERDUE_STATUS . '</div></div></div>',
  );


  // Lost Settings
  $form['charges']['lost'] = array(
    '#type' => 'fieldset',
    '#title' => t('Lost Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['charges']['lost']['lost_interval'] = array(
    '#type' => 'select',
    '#title' => t('Lost Notice Interval'),
    '#default_value' => CIRC_LOST_INTERVAL,
    '#description' => t('The number of days used to identify an item as near due.'),
    '#options' => $options,
  );
  $form['charges']['lost']['lost_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Lost Notice Color'),
    '#default_value' => CIRC_LOST_COLOR,
  );
  $form['charges']['lost']['lost_status'] = array(
    '#type' => 'textfield',
    '#title' => t('Lost Item Status'),
    '#default_value' => CIRC_LOST_STATUS,
    '#description' => t('This is the status that will appear beneath the title and author of an item when an item is marked lost.'),
  );
  $form['charges']['lost']['lost_example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="color-indicator"><strong>Example:</strong><div style="background-color: ' . CIRC_LOST_COLOR . ';"><div class="item-title">' . $example . '</div><div class="item-status">' . CIRC_LOST_STATUS . '</div></div></div>',
  );

  
  // Recall Settings
  $form['charges']['recall'] = array(
    '#type' => 'fieldset',
    '#title' => t('Recall Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['charges']['recall']['recall_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Recall Notice Color'),
    '#default_value' => CIRC_RECALL_COLOR,
  );
  $form['charges']['recall']['recall_status'] = array(
    '#type' => 'textfield',
    '#title' => t('Recall Item Status'),
    '#default_value' => CIRC_RECALL_STATUS,
    '#description' => t('This is the status that will appear beneath the title and author of an item when an item is marked recall.'),
  );
  $form['charges']['recall']['recall_example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="color-indicator"><strong>Example:</strong><div style="background-color: ' . CIRC_RECALL_COLOR . ';"><div class="item-title">' . $example . '</div><div class="item-status">' . CIRC_RECALL_STATUS . '</div></div></div>',
  );



  $form['requests'] = array(
    '#type' => 'fieldset',
    '#title' => t('Requested Item Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['requests']['requests_heading'] = array(
    '#type' => 'textfield',
    '#title' => t('Requests Heading'),
    '#default_value' => CIRC_REQUESTS_HEADING,
  );
  $form['requests']['requests_desc'] = array(
    '#type' => 'textarea',
    '#title' => t('Paragraph'),
    '#default_value' => CIRC_REQUESTS_DESC,
  );
  $form['requests']['requests_empty'] = array(
    '#type' => 'textarea',
    '#title' => t('Empty Text'),
    '#default_value' => CIRC_REQUESTS_EMPTY,
  );

  // Available Hold Settings
  $form['requests']['available'] = array(
    '#type' => 'fieldset',
    '#title' => t('Available Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['requests']['available']['available_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Available Notice Color'),
    '#default_value' => CIRC_AVAILABLE_COLOR,
  );
  $form['requests']['available']['available_status'] = array(
    '#type' => 'textfield',
    '#title' => t('Available Item Status'),
    '#default_value' => CIRC_AVAILABLE_STATUS,
    '#description' => t('This is the status that will appear beneath the title and author of an item when an item is marked available.'),
  );
  $form['requests']['available']['available_example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="color-indicator"><strong>Example:</strong><div style="background-color: ' . CIRC_AVAILABLE_COLOR . ';"><div class="item-title">' . $example . '</div><div class="item-status">' . CIRC_AVAILABLE_STATUS . '</div></div></div>',
  );


  // Unavailable Hold Settings
  $form['requests']['unavailable'] = array(
    '#type' => 'fieldset',
    '#title' => t('Unavailable Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['requests']['unavailable']['unavailable_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Unavailable Notice Color'),
    '#default_value' => CIRC_UNAVAILABLE_COLOR,
  );
  $form['requests']['unavailable']['unavailable_status'] = array(
    '#type' => 'textfield',
    '#title' => t('Unavailable Item Status'),
    '#default_value' => CIRC_UNAVAILABLE_STATUS,
    '#description' => t('This is the status that will appear beneath the title and author of an item when an item is marked unavailable.'),
  );
  $form['requests']['unavailable']['unavailable_example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="color-indicator"><strong>Example:</strong><div style="background-color: ' . CIRC_UNAVAILABLE_COLOR . ';"><div class="item-title">' . $example . '</div><div class="item-status">' . CIRC_UNAVAILABLE_STATUS . '</div></div></div>',
  );


  // Fines
  $form['fines'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fine Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['fines']['fines_heading'] = array(
    '#type' => 'textfield',
    '#title' => t('Fines Heading'),
    '#default_value' => CIRC_FINES_HEADING,
  );
  $form['fines']['fines_desc'] = array(
    '#type' => 'textarea',
    '#title' => t('Paragraph'),
    '#default_value' => CIRC_FINES_DESC,
  );
  $form['fines']['fines_empty'] = array(
    '#type' => 'textarea',
    '#title' => t('Empty Text'),
    '#default_value' => CIRC_FINES_EMPTY,
  );
  $form['fines']['fines_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Fine Notice Color'),
    '#default_value' => CIRC_FINES_COLOR,
  );
  $form['fines']['fines_example'] = array(
    '#type' => 'markup',
    '#value' => '<div class="color-indicator"><strong>Example:</strong><div style="background-color: ' . CIRC_FINES_COLOR . ';"><div class="item-title">' . $example . '</div></div></div>',
  );



  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save Changes',
  );
  return $form;
}
function circ_settings_form_validate($form_id, $form_values) {

}
function circ_settings_form_submit($form_id, $form_values) {
  variable_set('circ_date_format', $form_values['date_format']);
  variable_set('circ_example_title', $form_values['example_title']);
  variable_set('circ_example_author', $form_values['example_author']);

  variable_set('circ_charges_desc', $form_values['charges_desc']);
  variable_set('circ_charges_empty', $form_values['charges_empty']);

  variable_set('circ_courtesy_interval', $form_values['courtesy_interval']);
  variable_set('circ_courtesy_color', $form_values['courtesy_color']);
  variable_set('circ_courtesy_status', $form_values['courtesy_status']);

  variable_set('circ_overdue_color', $form_values['overdue_color']);
  variable_set('circ_overdue_status', $form_values['overdue_status']);

  variable_set('circ_lost_interval', $form_values['lost_interval']);
  variable_set('circ_lost_color', $form_values['lost_color']);
  variable_set('circ_lost_status', $form_values['lost_status']);

  variable_set('circ_requests_desc', $form_values['requests_desc']);
  variable_set('circ_requests_empty', $form_values['requests_empty']);

  variable_set('circ_available_color', $form_values['available_color']);
  variable_set('circ_available_status', $form_values['available_status']);

  variable_set('circ_unavailable_color', $form_values['unavailable_color']);
  variable_set('circ_unavailable_status', $form_values['unavailable_status']);

  variable_set('circ_recall_color', $form_values['recall_color']);
  variable_set('circ_recall_status', $form_values['recall_status']);

  variable_set('circ_charges_heading', $form_values['charges_heading']);
  variable_set('circ_requests_heading', $form_values['requests_heading']);
  variable_set('circ_fines_heading', $form_values['finefinesng']);
  drupal_set_message('Changes have been saved.');
}

function circ_charges($user) {
  $charges = array();
  $charges['charges'] = module_invoke_all('circ_charges', $user);
  $charges['uid'] = $user->uid;
  return $charges;
}
function circ_holds($user) {
  $holds = array();
  $holds['holds'] = module_invoke_all('circ_holds', $user);
  $holds['uid'] = $user->uid;
  return $holds;
}
function circ_fines($user) {
  $fines = array();
  $fines['fines'] = module_invoke_all('circ_fines', $user);
  $fines['uid'] = $user->uid;
  return $fines;
}

function theme_circ_charges($items) {
  $charges = array();
  foreach ($items['charges'] as $charge) {
    $due_date = strtotime($charge['DUE_DATE']);
    $time = time();

    if ($charge['STATUS'] == 'recall') {
      // Recall
      $classes = 'recall';
      $note = CIRC_RECALL_STATUS;
    } else if ($due_date < $time && $due_date - $time < -60 * 60 * 24 * CIRC_LOST_INTERVAL) {
      // Lost
      $classes = 'lost';
      $note = CIRC_LOST_STATUS;
    } else if ($due_date < $time) {
      // Overdue
      $classes = 'overdue';
      $note = CIRC_OVERDUE_STATUS;
    } else if ($due_date > $time && $due_date - $time < 60 * 60 * 24 * CIRC_COURTESY_INTERVAL) {
      // Courtesy 
      $classes = 'courtesy';
      $note = CIRC_COURTESY_STATUS;
    } else {
      $note = '';
      $classes = '';
    }
    if (!empty($charge['NOTE'])) {
      $note = $charge['NOTE'];      
    }

    $item = (empty($charge['AUTHOR'])) ? $charge['TITLE'] : $charge['TITLE'] . ' / ' . $charge['AUTHOR'];

    $charges[] = array(
      'data' => array(
        array(
          'class' => 'cell-item-type',
          'data' => _circ_item_type_to_icon($charge['ITEM_TYPE'])
        ),
        array(
          'class' => 'cell-item',
          'data' => '<div class="item-title">' . $item . '</div><div class="item-status">' . $note . '</div>',
        ),
        array(
          'class' => 'cell-due-date',
          'data' => date(CIRC_DATE_FORMAT, $due_date),
        ),
        array(
          'class' => 'cell-renew',
          'data' => (!empty($charge['RENEW_PATH'])) ? l(theme('image', drupal_get_path('module', 'circ') . '/icons/icon_renew.png', 'renew', 'renew'), $charge['RENEW_PATH'], array(), null, null, false, true) : '',
        ),
      ),
      'class' => $classes,
    );
  }

  $output .= '<h3>' . CIRC_CHARGES_HEADING . '</h3>';
  $output .= '<p>' . CIRC_CHARGES_DESC . '</p>';
  $output .= '<p>' . l(theme('image', drupal_get_path('module', 'circ') . '/icons/icon_renew_all.png', 'Renew All Items', 'Renew All items'), 'user/' . $items['uid'] . '/circ/renewall', array(), NULL, NULL, FALSE, TRUE) . '</p>';
  if (!empty($charges)) {
    $header = array('Type', 'Item', 'Due Date', 'Renew');
    $attributes = array('class' => 'charges');
    $output .= theme('table', $header, $charges);
  } else {
    $output .= '<p>' . t(CIRC_CHARGES_EMPTY) . '</p>';
  }

  return $output;
}

function theme_circ_holds($items) {
 $holds = array();
  foreach ($items['holds'] as $hold) {
    $due_date = date(CIRC_DATE_FORMAT, strtotime($hold['NOT_NEEDED_AFTER']));

    $icon = _circ_item_type_to_icon($hold['ITEM_TYPE']);
    $item = (empty($hold['AUTHOR'])) ? $hold['TITLE'] : $hold['TITLE'] . ' / ' . $hold['AUTHOR'];

    // Available is the exception for holds. Thus, default to unavailable
    if ($hold['STATUS'] == 'available') {
      $note = CIRC_AVAILABLE_STATUS;
      $note .= (!empty($hold['PICKUP_LOCATION'])) ? t('You may pickup the item at the !location. ', array('!location' => $hold['PICKUP_LOCATION'])) : '';
    } else {
      $note = CIRC_UNAVAILABLE_STATUS;
      $note .= (!empty($hold['DUE_DATE'])) ? t('Item is due !due_date. ', array('!due_date' => $due_date)) : '';
      $note .= (!empty($hold['QUEUE_POSITION'])) ? t('Your position to receive this item is #!number. ', array('!number' => $hold['QUEUE_POSITION'])) : '';
    }

    // Datasources override theme engine
    if (!empty($hold['NOTE'])) {
      $note = $hold['NOTE'];
    }

    $classes = $hold['STATUS'];

    $holds[] = array(
      'data' => array(
        array(
          'class' => 'cell-item-type',
          'data' => $icon,
        ),
        array(
          'class' => 'cell-item',
          'data' => '<div class="item-title">' . $item . '</div><div class="item-status">' . $note . '</div>',
        ),
        array(
          'class' => 'cell-due-date',
          'data' => $due_date,
        ),
      ),
      'class' => $classes,
    );
  }

  $output .= '<h3>' . CIRC_REQUESTS_HEADING . '</h3>';
  $output .= '<p>' . CIRC_REQUESTS_DESC . '</p>';
  if (!empty($holds)) {
    $header = array('Type', 'Item', 'Not Needed After');
    $attributes = array('class' => 'holds');
    $output .= theme('table', $header, $holds);
  } else {
    $output .= '<p>' . CIRC_REQUESTS_EMPTY . '</p>';
  }

  return $output;
}

function theme_circ_fines($items) {
  $fines = array();
  foreach ($items['fines'] as $fine) {
    $fines[] = array(
      'data' => array(
        array(
          'class' => 'cell-item-type',
          'data' => _circ_item_type_to_icon($fine['ITEM_TYPE']), 
        ),
        array(
          'class' => 'cell-title',
          'data' => $fine['TITLE'],
        ),
        array(
          'class' => 'cell-desc',
          'data' => $fine['FINE_FEE_DESC'],
        ),
        array(
          'class' => 'cell-amount',
          'data' => '$' . $fine['FINE_FEE_AMOUNT'] / 100.0,// Do some currency formatting
        ),
        array(
          'class' => 'cell-balance',
          'data' => '$' . $fine['FINE_FEE_BALANCE'] / 100.0,// Do some currency formatting
        ),
      ),
      'class' => 'fines',
    );
  }

  $output .= '<h3>' . CIRC_FINES_HEADING . '</h3>';
  $output .= '<p>' . CIRC_FINES_DESC . '</p>';
  if (!empty($fines)) {
    $header = array('Type', 'Item', 'Reason', 'Fine', 'Remaining Balance');
    $attributes = array('class' => 'fines');
    $output .= theme('table', $header, $fines, $attributes);
  } else {
    $output .= '<p>' . CIRC_FINES_EMPTY . '</p>';
  }

  return $output;
}

function circ_account() {
  $user = user_load(array('uid' => arg(1)));
  $barcode = db_escape_string($user->profile_voyager_username);
  
  $charges = circ_charges($user);
  $output .= theme('circ_charges', $charges);

  $holds = circ_holds($user);
  $output .= theme('circ_holds', $holds);

  $fines = circ_fines($user);
  $output .= theme('circ_fines', $fines);

  $s = '<style>';
  foreach (array('courtesy' => CIRC_COURTESY_COLOR, 'overdue' => CIRC_OVERDUE_COLOR, 'lost' => CIRC_LOST_COLOR, 'recall' => CIRC_RECALL_COLOR, 'available' => CIRC_AVAILABLE_COLOR, 'unavailable' => CIRC_UNAVAILABLE_COLOR, 'fines' => CIRC_FINES_COLOR) as $key => $value) {
    if (!empty($value)) {
      $s .= 'table tbody tr.' . $key . ' {' . "\n";
      $s .= 'background-color: ' . $value . ';' . "\n";
      $s .= '}' . "\n";
    }
  }
  $s .= '</style>';

  $output .= $s;
  return $output;
}

function _circ_item_type_to_icon($item) {
  if (is_string($item)) {
    $item = circ_get_item_type($item);
  } 
  if (empty($item['icon'])) {
    $item['icon'] = CIRC_DEFAULT_ICON;
  }
  $attributes = array('class' => 'item-type-icon', 'style' => 'max-width:18px; max-height:18px;');
  return theme('image', $item['icon'], $item['display'], $item['display'], $attributes, false);
}

function circ_get_item_type($code) {
  $result = db_query("select * from {circ_item_types} where code = '%s';", $code);
  return db_fetch_array($result);
}

function circ_get_item_types() {
  $types = array();
  $result = db_query("select * from {circ_item_types} order by weight, code asc;");
  while ($type = db_fetch_array($result)) {
    $types[] = $type;
  }
  return $types;
}

function circ_add_item_type($code, $display, $icon = '', $weight = 0) {
  $result = db_query("replace into {circ_item_types} (code, display, icon, weight) values ('%s', '%s', '%s', %d);", $code, $display, $icon, $weight); 
  return ($result) ? true : false;
}

function circ_del_item_type($code) {
  $type = circ_get_item_type($code);
  if (!empty($type)) {
    file_delete($type['icon']);
    $result = db_query("delete from {circ_item_types} where code = '%s';", $code);
  }
  return ($result) ? true : false;
}
