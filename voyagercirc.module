<?php
function voyagercirc_menu() {
  $admin_access = user_access('administer circ');

  $items = array();
  $items[] = array(
    'path' => 'admin/library/circ/itemtypes/importfromvoyager',
    'title' => t('Import from Voyager'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('voyagercirc_import_item_types_confirm'),
    'access' => true,
    'type' => MENU_LOCAL_TASK,
  );

  global $user;
  $items[] = array(
    'path' => 'user/' . arg(1) . '/circ/voyager/renew/' . arg(5),
    'title' => t('Renew Item'),
    'callback' => 'voyagercirc_renew',
    'callback arguments' => array(arg(1), arg(5)),
    'access' => ($user->uid == arg(1) || $admin_access) ? true : false,
    'type' => MENU_CALLBACK,
  );
  $items[] = array(
    'path' => 'user/' . arg(1) . '/circ/renewall',
    'title' => t('Renew All Items'),
    'callback' => 'voyagercirc_renew_all',
    'callback arguments' => array(arg(1)),
    'access' => ($user->uid == arg(1) || $admin_access) ? true : false,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function voyagercirc_import_item_types_confirm() {
  return confirm_form($form,
                        t('Are you sure you want to import item types from Voyager?'),
                        'admin/library/circ',
                        NULL,
                        t('Import'),
                        t('Cancel'));
}

function voyagercirc_import_item_types_confirm_submit($form_id, $form_values) {
  voyagercirc_import_item_types();
  return 'admin/library/circ';
}

function voyagercirc_circ_holds($user) {
  $barcode = $user->profile_voyager_username;

  $items = array();
  $sql = <<<SQL
    SELECT
      ITEM_TYPE.ITEM_TYPE_CODE as ITEM_TYPE
    , BIB_TEXT.TITLE_BRIEF as TITLE
    , BIB_TEXT.AUTHOR as AUTHOR
    , HOLD_RECALL.EXPIRE_DATE as NOT_NEEDED_AFTER
    , HOLD_RECALL_ITEMS.HOLD_RECALL_STATUS
    , HOLD_RECALL_ITEMS.QUEUE_POSITION
    , CIRC_TRANSACTIONS.CURRENT_DUE_DATE as DUE_DATE
    , LOCATION.LOCATION_NAME as PICKUP_LOCATION
    FROM
      PATRON_BARCODE
      INNER JOIN HOLD_RECALL USING(PATRON_ID)
      INNER JOIN BIB_TEXT USING(BIB_ID)
      INNER JOIN BIB_ITEM USING(BIB_ID)
      INNER JOIN LOCATION ON LOCATION.LOCATION_ID = HOLD_RECALL.PICKUP_LOCATION
      LEFT JOIN CIRC_TRANSACTIONS USING(ITEM_ID)
      INNER JOIN ITEM USING(ITEM_ID)
      INNER JOIN ITEM_TYPE USING(ITEM_TYPE_ID)
      INNER JOIN HOLD_RECALL_ITEMS USING(HOLD_RECALL_ID)
      INNER JOIN HOLD_RECALL_STATUS ON HOLD_RECALL_STATUS.HR_STATUS_TYPE = HOLD_RECALL_ITEMS.HOLD_RECALL_STATUS
    WHERE
      UPPER(PATRON_BARCODE.PATRON_BARCODE)=UPPER('$barcode')
    ORDER BY
      HOLD_RECALL.CREATE_DATE ASC
SQL;

  $result = voyager_db_query($sql);

  /**
   * HOLD_RECALL_STATUS can be one of the following:
   * *1 - Active - Hold placed but not yet available
   * *2 - Pending - Hold placed and is now available
   * *3 - Cancelled - Hold placed and was cancelled. Only shows up in archive table. We do not user.
   * *4 - Charged
   * *5 - Expired
   */
  while ($item = voyager_db_fetch($result)) {
    if ($item['HOLD_RECALL_STATUS'] == '2') {
        $item['STATUS'] = 'available';
    } else {
        $item['STATUS'] = 'unavailable';
    }
    unset($item['HOLD_RECALL_STATUS']);

    $items[] = $item;
  }


  return $items;
}

function voyagercirc_circ_charges($user) {
  $barcode = $user->profile_voyager_username;
  $sql = <<<SQL
    SELECT 
      ITEM_TYPE.ITEM_TYPE_CODE as ITEM_TYPE
    , BIB_TEXT.TITLE_BRIEF as TITLE
    , BIB_TEXT.AUTHOR as AUTHOR
    , CIRC_TRANSACTIONS.CURRENT_DUE_DATE as DUE_DATE
    , CIRC_TRANSACTIONS.RECALL_DATE
    , ITEM_BARCODE.ITEM_BARCODE
    FROM
      PATRON_BARCODE
      INNER JOIN CIRC_TRANSACTIONS USING(PATRON_ID)
      LEFT JOIN BIB_ITEM USING(ITEM_ID)
      LEFT JOIN BIB_TEXT USING(BIB_ID)
      LEFT JOIN ITEM USING(ITEM_ID)
      LEFT JOIN ITEM_TYPE USING(ITEM_TYPE_ID)
      -- weird, seems same item can have multiple barcodes, some inactive.
      INNER JOIN (SELECT * FROM ITEM_BARCODE WHERE BARCODE_STATUS = 1) ITEM_BARCODE USING(ITEM_ID)
    WHERE 
      UPPER(PATRON_BARCODE.PATRON_BARCODE)=UPPER('$barcode')
    ORDER BY 
      CIRC_TRANSACTIONS.CURRENT_DUE_DATE ASC
SQL;
  $result = voyager_db_query($sql);

  $items = array();
  while ($item = voyager_db_fetch($result)) {
    $item['STATUS'] = 'charged';

    // Identify recalled items.
    if (!empty($item['RECALL_DATE'])) {
      $item['NOTE'] = 'Item recalled. The due date has been modified. Please return this item as soon as possible.';
      $item['STATUS'] = 'recall';
    }
    $item['RENEW_PATH'] = 'user/' . $user->uid . '/circ/voyager/renew/' . $item['ITEM_BARCODE'];

    $items[] = $item;
  }

  return $items;
}

function voyagercirc_circ_fines($user) {
  $barcode = $user->profile_voyager_username;

  $sql = <<<SQL
    SELECT
      *
    FROM
      PATRON_BARCODE
      INNER JOIN FINE_FEE USING(PATRON_ID)
      INNER JOIN FINE_FEE_TYPE USING(FINE_FEE_TYPE)
      LEFT JOIN BIB_ITEM USING(ITEM_ID)
      LEFT JOIN BIB_TEXT USING(BIB_ID)
      LEFT JOIN ITEM USING(ITEM_ID)
      LEFT JOIN ITEM_TYPE USING(ITEM_TYPE_ID)
    WHERE
      UPPER(PATRON_BARCODE.PATRON_BARCODE)=UPPER('$barcode') AND
      FINE_FEE.FINE_FEE_BALANCE > 0
    ORDER BY
      FINE_FEE.CREATE_DATE ASC
SQL;
  $result = voyager_db_query($sql);

  $items = array();
  while ($item = voyager_db_fetch($result)) {
    $items[] = $item;
  }
  return $items;
}

function voyagercirc_import_item_types() {
  $sql = "SELECT * FROM ITEM_TYPE";
  $result = voyager_db_query($sql);
  while ($type = voyager_db_fetch($result)) {
    $test = circ_get_item_type($type['ITEM_TYPE_CODE']);
    if (empty($test)) {
      circ_add_item_type($type['ITEM_TYPE_CODE'], $type['ITEM_TYPE_DISPLAY']);
      drupal_set_message(t('Imported item type !code - !display', array('!code' => $type['ITEM_TYPE_CODE'], '!display' => $type['ITEM_TYPE_DISPLAY'])));
    } else {
      drupal_set_message(t('Did not import !code - !display because an item type with that code already exists.', array('!code' => $type['ITEM_TYPE_CODE'], '!display' => $type['ITEM_TYPE_DISPLAY'])));
    }
  }
  drupal_goto('admin/library/circ/itemtypes');
}

/**
 * Begin SIP Procedures
 */ 
function _voyagercirc_sip_connect($sip) {
  $fields = array(
    'UIDAlgorithm' => '0',
    'PWDAlgorithm' => '0',
    'CN' => 'Selfchk',
    'CO' => 'newdrug',
    'CP' => 'SELF',
  );
  if ($msg = SIPClient::msg93($fields)) {
    $sip->send($msg);
    $response = $sip->recv();
    $parse = $sip->parse($response);
    if ($parse['Ok'] == 0) {
      return false;
    }
    return true;
  } else {
    return false;
  }
}

function _voyagercirc_sip_status($sip, $barcode) {
  $fields = array(
    'Language' => '001',
    'Summary' => '',
    'AO' => 'drupalcirc',
    'AA' => $barcode,
  );
  if ($msg = SIPClient::msg63($fields)) {
    $sip->send($msg);
    $response = $sip->recv();
    $parse = $sip->parse($response);
    if ($parse['PatronStatus']['RenewalPrivilegesDenied'] == 'Y') {
      return false;
    }
    return true;
  } else {
    return false;
  }
}

function _voyagercirc_sip_renew($sip, $patron, $item) {
 $fields = array(
    'ThirdPartyAllowed' => 'N',
    'NoBlock' => 'N',
    'NBDueDate' => date('Ymd    His', strtotime('Oct 28, 2009')),
    'AO' => 'drupalcirc',
    'AA' => $patron,
    'AB' => $item,
  );
  if ($msg = SIPClient::msg29($fields)) {
    $sip->send($msg);
    $response = $sip->recv();
    $parse = $sip->parse($response);
    if ($parse['Ok'] == '1') {
      return true;
    } else {
      return false;
    }
  }
}

function _voyagercirc_sip_item_info($sip, $item) {
 $fields = array(
    'AO' => 'drupalcirc',
    'AB' => $item,
  );
  if ($msg = SIPClient::msg17($fields)) {
    $sip->send($msg);
    $response = $sip->recv();
    $parse = $sip->parse($response);
    return $parse;
  }
}

function voyagercirc_renew_all($uid) {
  $user = user_load(array('uid' => $uid));
  $items = circ_charges($user);

  $patron = user_load(array('uid' => $uid));
  $sip = SIPClient::connect('voyager.lib.umb.edu', '7031');
  $sip->verbose = false;

  if (_voyagercirc_sip_connect($sip) && _voyagercirc_sip_status($sip, $patron->profile_voyager_username)) {
    foreach ($items['charges'] as $item) {
      $itemBarcode = $item['ITEM_BARCODE'];
      if (!empty($itemBarcode) && _voyagercirc_sip_renew($sip, $patron->profile_voyager_username, $itemBarcode)) {
        $parse = $sip->parse($sip->lastRecvMsg);
        $due = mktime(0, 0, 0, substr($parse['AH'], 4, 2), substr($parse['AH'], 6, 2), substr($parse['AH'], 0, 4));
        drupal_set_message($item['TITLE'] . ' was renewed. It is now due ' . date(CIRC_DATE_FORMAT, strtotime($parse['AH'])));
      } else {
        drupal_set_message($item['TITLE'] . ' could not be renewed.');
      }
    }
    drupal_goto('user/' . $uid . '/circ');
  } else {
    return _sip_error($uid);
  }
}

function voyagercirc_renew($uid, $item) {
  $patron = user_load(array('uid' => $uid));
  $sip = SIPClient::connect('voyager.lib.umb.edu', '7031');
  $sip->verbose = false;
  
  if (_voyagercirc_sip_connect($sip) && 
      _voyagercirc_sip_status($sip, $patron->profile_voyager_username) &&
      _voyagercirc_sip_renew($sip, $patron->profile_voyager_username, $item)) 
     {
    $parse = $sip->parse($sip->lastRecvMsg);
    $due = mktime(0, 0, 0, substr($parse['AH'], 4, 2), substr($parse['AH'], 6, 2), substr($parse['AH'], 0, 4));
    drupal_set_message($parse['AJ'] . ' was renewed. It is now due ' . date(CIRC_DATE_FORMAT, strtotime($parse['AH'])));
    drupal_goto('user/' . $uid . '/circ');
  } else {
    return _sip_error($uid);
  }
}
  
function _sip_error($uid) {
  drupal_set_message('Item could not be renewed. Contact the Circulation Desk for assistance.');
  drupal_goto('user/' . $uid . '/circ');
}
